//apply plugin: "jacoco"
//
//configurations.all {
//    resolutionStrategy {
//        eachDependency { details ->
//            if ('org.jacoco' == details.requested.group) {
//                details.useVersion "0.8.7"
//            }
//        }
//    }
//}
//
//tasks.withType(Test) {
//    jacoco.includeNoLocationClasses = true
//    jacoco.excludes += ["jdk.internal.*",]
//}
//
//task jacocoTestReport(type: JacocoReport, dependsOn: ["koverMergedXmlReport"]) {
//    // Specify the type of jacoco reports that should be created.
//    reports {
//        xml.enabled = true
//        html.enabled = true
//        html.destination file("${buildDir}/jacoco/")
//        xml.destination file("${buildDir}/jacoco/jacoco.xml")
//    }
//
//    // A collection of files within our own codebase that we want to exclude from coverage reports.
////    def excludes = ['**/*Component.class',
////                    '**/*Module.class',
////                    "**/databinding/**",
////                    '**/R.class',
////                    '**/R$*.class',
////                    '**/BuildConfig.*',
////                    '**/Manifest*.*',
////                    '**/*Test*.*',
////                    'androidx/**/*.*']
////    def mainSrc = "${project.projectDir}/src/main/java"
////
////    // sources
////    sourceDirectories.setFrom(files([mainSrc]))
////
////    // generated classes
////    classDirectories.from = fileTree(
////            dir: "$buildDir/intermediates/classes/debug",
////            excludes: excludes
////    ) + fileTree(
////            dir: "$buildDir/tmp/kotlin-classes/debug",
////            excludes: excludes
////    )
//
//    // Output and existing data
//    // Combine Unit test and Instrumented test reports
//    executionData.from = fileTree(dir: project.projectDir, includes: [
//            // Unit tests coverage data
//            "app/build/kover/testDebugUnitTest.exec",
//            // Instrumented tests coverage data
////            "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"
//    ])
////    executionData.from = fileTree(dir: project.projectDir, includes: ['**/**/*.exec', '**/**/*.ec'])
//}