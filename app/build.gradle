apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'jacoco'

def keystorePropertiesFile= rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'testReleaseUnitTest',
                                                      'createDebugCoverageReport', 'createReleaseCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}
android {
    // https://stackoverflow.com/questions/18328730/how-to-create-a-release-signed-apk-file-using-gradle
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    compileSdkVersion 28
    defaultConfig {
        applicationId "com.kslimweb.ipolyglot"
        minSdkVersion 26
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError true
        absolutePaths false
        disable 'InvalidPackage', 'ContentDescription'
        lintConfig file("$rootProject.projectDir/lint.xml")
    }
    buildTypes {
        debug {
            minifyEnabled false
            multiDexEnabled true
            debuggable true
            testCoverageEnabled true
            applicationIdSuffix = '.dev'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    buildTypes.each {
        it.buildConfigField 'String', 'AlgoliaAppID', ALGOLIA_APP_ID
        it.buildConfigField 'String', 'AlgoliaSearchKey', ALGOLIA_SEARCH_KEY
    }
    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/DEPENDENCIES'
        pickFirst 'META-INF/kotlinx-io.kotlin_module'
        pickFirst 'META-INF/atomicfu.kotlin_module'
        pickFirst 'META-INF/kotlinx-coroutines-io.kotlin_module'
        pickFirst 'META-INF/kotlinx-coroutines-core.kotlin_module'
        pickFirst 'META-INF/kotlinx-serialization-runtime.kotlin_module'
        pickFirst 'META-INF/ktor-*'
    }
    applicationVariants.all { variant ->
        variant.outputs.all { v ->
            outputFileName = "ipolygot-${v.baseName}-${variant.versionName}-${defaultConfig.versionCode}.apk"
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
        unitTests.returnDefaultValues = true
    }

    buildFeatures.dataBinding = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.2'
    testImplementation 'junit:junit:4.13'

    // mvvm
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"

    // for material design
    implementation 'com.jaredrummler:material-spinner:1.3.1'
    implementation 'androidx.cardview:cardview:1.0.0'

    // google translation api
    implementation 'com.google.cloud:google-cloud-translate:1.87.0'

    // algolia
    implementation 'com.algolia:instantsearch-android:2.2.1'

    // coroutine
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.4'

    // Dependency Injection
    api 'com.google.dagger:dagger:2.26'
    kapt 'com.google.dagger:dagger-compiler:2.26'

    implementation platform('com.google.firebase:firebase-bom:25.12.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'

    // Debug only dependencies
    debugImplementation 'com.facebook.stetho:stetho:1.5.1'
    debugImplementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'

    // androidx.test
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}
