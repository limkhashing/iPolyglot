apply plugin: "jacoco"

configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.8"
            }
        }
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes += ["jdk.internal.*",]
}

task combinedJacocoTestReport(type: JacocoReport, dependsOn: ["koverXmlReport"]) {
    // Specify the type of jacoco reports that should be created.
    reports {
        xml.enabled = true
        html.enabled = true
    }

    // A collection of files within our own codebase that we want to exclude from coverage reports.
    def excludes = ["**/databinding/**", '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']

    // sources
    sourceDirectories.from = [
            android.sourceSets.main.java.srcDirs,
            "src/main/java"
    ]

    // generated classes
    classDirectories.from = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )

    // Output and existing data
    // Combine Unit test and Instrumented test reports
    executionData.from = fileTree(dir: "$buildDir", includes: [
            // Unit tests coverage data
            "/jacoco/*.exec",
//            "jacoco/testDebugUnitTest.exec",
            // Instrumented tests coverage data
//            "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"
    ])
}